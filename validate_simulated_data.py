#!/usr/bin/env python3
# //////////////////////////////////////////////////////////////////////////#
#                                                                          #
#   Copyright (C) 2020 by David B. Blumenthal                              #
#                                                                          #
#   This file is part of EpiGEN.                                           #
#                                                                          #
#   EpiGEN is free software: you can redistribute it and/or modify         #
#   it under the terms of the GNU General Public License as published by   #
#   the Free Software Foundation, either version 3 of the License, or      #
#   (at your option) any later version.                                    #
#                                                                          #
#   EpiGEN is distributed in the hope that it will be useful,              #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the           #
#   GNU General Public License for more details.                           #
#                                                                          #
#   You should have received a copy of the GNU General Public License      #
#   along with EpiGEN. If not, see <http://www.gnu.org/licenses/>.         #
#                                                                          #
# //////////////////////////////////////////////////////////////////////////#

"""Run this script to validate the epistasis data generated with EpiGEN.

This script has to be run on top of epistasis data generated with EpiGEN.

**Usage**::

    python3 validate_simulated_data.py [required arguments] [optional arguments]

**Required Arguments:**
    ``--sim-data SIM_DATA``
        Description:
            Path to (compressed) JSON file generated by EpiGEN.
        Accepted Arguments:
            Strings ending in ``.json`` or ``.json.bz2`` that represent paths to existing result files.
        Effect:
            Specifies the epistasis data that should be validated.

**Optional Arguments:**
    ``--log LOG_FILE``
        Description:
            If provided, the results of the validation is saved as a JSON file.
        Accepted Arguments:
            Strings to writable paths ending in ``.json``.
        Effect:
            Specifies if and if so where the results of the validation should be saved.

**Output:**
    *Output File:*
        Path:
            ``<LOG_FILE>``
        Format:
            JSON field of the form ``{"test": <TEST>, "p_value": <P_VALUE>, "disease_mafs": <DISEASE_MAFS>, "penetrance_table": <PENETRANCE_TABLE>}``.
    ``<TEST>``
        Key:
            ``"test"``
        Content and Format:
            Statistical test used by validation: Chi-square for categorical phenotypes, one-way ANOVA F-test for
            quantitative phenotypes.
    ``<P_VALUE>``
        Key:
            ``"p_value"``
        Content and Format:
            The obtained p-value.
    ``<DISEASE_MAFS>``
        Key:
            ``"disease_mafs"``
        Content and Format:
            JSON field of the form ``[MAF_0, ..., MAF_<SNPS-1>]``, where ``MAF_S`` encodes the MAF of
            the disease SNP with index ``S`` in the ``"disease_snps"`` field of the input data.
    ``<PENETRANCE_TABLE>``
        Key:
            ``"penetrance_table"``
        Content and Format:
            The penetrance table underlying the test in the form ``{<GENOTYPE>: <PHENOTYPES>}``, where ``GENOTYPE`` is
            the genotype at the disease SNPs and `PHENOTYPES`` is the vector of phenotypes of all individuals with the
            given phenotype at the disease SNPs.`

"""

import argparse
import utils.validation_utils as utils


def run_script():
    """Runs the script."""

    descr = "\n############################################################################\n"
    descr += "#################### EpiGEN - validate_simulated_data.py ###################\n"
    descr += "\nRun this script to simulate epistasis data.\n"
    descr += "\nusage: python3 %(prog)s [required arguments] [optional arguments]\n"
    epilo = "\n############################################################################\n"
    parser = argparse.ArgumentParser(description=descr, formatter_class=argparse.RawTextHelpFormatter, epilog=epilo,
                                     usage=argparse.SUPPRESS)
    required_args = parser.add_argument_group("required arguments")
    required_args.add_argument("--sim-data", required=True, help="Path to simulated data.")
    optional_args = parser.add_argument_group("optional arguments")
    optional_args.add_argument("--log", help="Path to location where log-file should be saved.")
    args = parser.parse_args()

    print("\n############################################################################")
    print("#################### EpiGEN - validate_simulated_data.py ###################\n")

    sim_data = utils.load_data(args.sim_data)
    penetrance_table = utils.generate_penetrance_table(sim_data)
    if sim_data['model_type'] == 'quantitative':
        test = 'one-way ANOVA F test'
        p_value = utils.one_way_anova(penetrance_table)
    else:
        test = 'chi-square test'
        p_value = utils.chi_square(penetrance_table, int(sim_data['num_categories']))
    disease_mafs = [sim_data['mafs'][snp] for snp in sim_data['disease_snps']]
    print(f'Statistical test: {test}.')
    print(f'Obtained p-value: {p_value}.')
    print(f'MAFs of disease SNPs: {disease_mafs}.')
    if args.log:
        utils.write_to_log_file(args.log, test, p_value, disease_mafs, penetrance_table)

    print("\n############################################################################")


if __name__ == "__main__":
    run_script()
